//
// Grid system
// --------------------------------------------------------------------------


// Variables
// --------------------------------------------------------------------------

@wrapper:  750px;
@gutter:   20px;
@rtl:      false;
@flexbox:  false;


// Debug
// --------------------------------------------------------------------------

.debug(@bg: blue) {
    * {
        background: fade(@bg, 10%);
    }
}


// Flexbox container
// --------------------------------------------------------------------------

.flex-container(@direction: row) {
    display: flex;

    & when (@direction = row) {
        flex-flow: row wrap;
    }
    & when (@direction = column) {
        flex-flow: column nowrap;
    }
}


// Horizontally center a container element and apply padding to it
// --------------------------------------------------------------------------

.center(@max-size: @wrapper, @pad: (@gutter / 2), @flex: @flexbox) {
    & when not (@flex = true) {
        .clearfix();
    }
    & when (@flex = true) {
        .flex-container();
    }
    & when not (@pad = 0) {
        padding-left: @pad;
        padding-right: @pad;

        @media (min-width: @screen-sm-min) {
            padding-left: (@pad + 5);
            padding-right: (@pad + 5);
        }
    }

    max-width: @max-size;
    margin-left: auto;
    margin-right: auto;

    @media (min-width: @screen-md-min) {
        max-width: (@max-size + 220px);
    }

    @media (min-width: @screen-lg-min) {
        max-width: (@max-size + 420px);
    }
}


// Align nested elements
// --------------------------------------------------------------------------

.align(@location: middle-center, @flex: @flexbox) {
    & when (@flex = false) {
        position: relative;

        > * {
            & when (@location = reset) {
                position: static;
            }
            & when not (@location = reset) {
                position: absolute;
            }
            & when (@location = reset) {
                top: auto;
                right: auto;
                bottom: auto;
                left: auto;
                transform: translate3d(0, 0, 0);
            } & when (@location = top-left) {
                top: 0;
                right: auto;
                bottom: auto;
                left: 0;
                transform: translate3d(0, 0, 0);
            } & when (@location = top-center) {
                top: 0;
                right: auto;
                bottom: auto;
                left: 50%;
                transform: translate3d(-50%, 0, 0);
            } & when (@location = top) {
                top: 0;
                right: auto;
                bottom: auto;
                left: 50%;
                transform: translate3d(-50%, 0, 0);
            } & when (@location = top-right) {
                top: 0;
                right: 0;
                bottom: auto;
                left: auto;
                transform: translate3d(0, 0, 0);
            } & when (@location = middle-left) {
                top: 50%;
                right: auto;
                bottom: auto;
                left: 0;
                transform: translate3d(0, -50%, 0);
            } & when (@location = left) {
                top: 50%;
                right: auto;
                bottom: auto;
                left: 0;
                transform: translate3d(0, -50%, 0);
            } & when (@location = middle-right) {
                top: 50%;
                right: 0;
                bottom: auto;
                left: auto;
                transform: translate3d(0, -50%, 0);
            } & when (@location = middle-center) {
                top: 50%;
                right: auto;
                bottom: auto;
                left: 50%;
                transform: translate3d(-50%, -50%, 0);
            } & when (@location = right) {
                top: 50%;
                right: 0;
                bottom: auto;
                left: auto;
                transform: translate3d(0, -50%, 0);
            } & when (@location = bottom-left) {
                top: auto;
                right: auto;
                bottom: 0;
                left: 0;
                transform: translate3d(0, 0, 0);
            } & when (@location = bottom-center) {
                top: auto;
                right: auto;
                bottom: 0;
                left: 50%;
                transform: translate3d(-50%, 0, 0);
            } & when (@location = bottom) {
                top: auto;
                right: auto;
                bottom: 0;
                left: 50%;
                transform: translate3d(-50%, 0, 0);
            } & when (@location = bottom-right) {
                top: auto;
                right: 0;
                bottom: 0;
                left: auto;
                transform: translate3d(0, 0, 0);
            }
        }
    }
    & when (@flex = true) {
        display: flex;
        justify-content: center;
        align-items: center;

        & when (@location = reset) {
            justify-content: inherit;
            align-items: inherit;
        } & when (@location = top-left) {
            justify-content: flex-start;
            align-items: flex-start;
        } & when (@location = top-center) {
            justify-content: center;
            align-items: flex-start;
        } & when (@location = center) {
            justify-content: center;
            align-items: flex-start;
        } & when (@location = top-right) {
            justify-content: flex-end;
            align-items: flex-start;
        } & when (@location = middle-left) {
            justify-content: flex-start;
            align-items: center;
        } & when (@location = left) {
            justify-content: flex-start;
            align-items: center;
        } & when (@location = middle-right) {
            justify-content: flex-end;
            align-items: center;
        } & when (@location = right) {
            justify-content: flex-end;
            align-items: center;
        } & when (@location = bottom-left) {
            justify-content: flex-start;
            align-items: flex-end;
        } & when (@location = bottom-center) {
            justify-content: center;
            align-items: flex-end;
        } & when (@location = center) {
            justify-content: center;
            align-items: flex-end;
        } & when (@location = bottom-right) {
            justify-content: flex-end;
            align-items: flex-end;
        }
    }
}


// Column
// --------------------------------------------------------------------------

.column(@fraction: 1 of 1, @cycle: extract(@fraction, 3), @gut: @gutter, @flex: @flexbox) {
    @numerator: extract(@fraction, 1);
    @denominator: extract(@fraction, 3);
    @_fraction: e('@{numerator}/@{denominator}');

    & when (@gut = 0) {
        width: e(%('calc(99.999999% * %s)', @_fraction));
    }
    & when not (@gut = 0) {
        width: e(%('calc(99.99% * %s - (%s - %s * %s))', @_fraction, @gut, @gut, @_fraction));
    }
    & when (@flex = false) {
        & when (@rtl = true) {
            &:nth-child(n) {
                margin-left: @gut;
                float: right;
                clear: none;
            }
            &:last-child {
                margin-left: 0;
            }
            &:nth-child(@{cycle}n) {
                margin-left: 0;
                float: left;
            }
            &:nth-child(@{cycle}n + 1) {
                clear: right;
            }
        }
        & when not (@rtl = true) {
            &:nth-child(n) {
                margin-right: @gut;
                float: left;
                clear: none;
            }
            &:last-child {
                margin-right: 0;
            }
            &:nth-child(@{cycle}n) {
                margin-right: 0;
                float: right;
            }
            &:nth-child(@{cycle}n + 1) {
                clear: left;
            }
        }
    }
    & when (@flex = true) {
        flex: 0 0 auto;
        & when (@rtl = true) {
            &:nth-child(n) {
                margin-left: @gut;
            }
            &:last-child {
                margin-left: 0;
            }
            &:nth-child(@{cycle}n) {
                margin-left: 0;
            }
        }
        & when not (@rtl = true) {
            &:nth-child(n) {
                margin-right: @gut;
            }
            &:last-child {
                margin-right: 0;
            }
            &:nth-child(@{cycle}n) {
                margin-right: 0;
            }
        }
    }
}


// Offset
// --------------------------------------------------------------------------

.offset(@fraction: 1 of 1, @dir: row, @gut: @gutter) {
    @numerator: extract(@fraction, 1);
    @denominator: extract(@fraction, 3);
    @_fraction: e('@{numerator}/@{denominator}');

    & when (@dir = row) {
        & when (@numerator > 0) {
            & when (@gut = 0) {
                margin-right: e(%('calc(99.999999% * %s)', @_fraction)) !important;
            }
            & when not (@gut = 0) {
                margin-right: e(%('calc(99.99% * %s - (%s - %s * %s) + (%s * 2))', @_fraction, @gut, @gut, @_fraction, @gut)) !important;
            }
        }
        & when (@numerator < 0) {
            & when (@gut = 0) {
                margin-left: e(%('calc(99.999999% * (%s * -1))', @_fraction)) !important;
            }
            & when not (@gut = 0) {
                margin-left: e(%('calc(99.99% * (%s * -1) - (%s - %s * (%s * -1)) + %s)', @_fraction, @gut, @gut, @_fraction, @gut)) !important;
            }
        }
        & when (@numerator = 0) {
            margin-left: 0 !important;
            margin-right: @gut !important;
        }
    }
    & when (@dir = column) {
        & when (@numerator > 0) {
            & when (@gut = 0) {
                margin-bottom: e(%('calc(99.999999% * %s)', @_fraction)) !important;
            }
            & when not (@gut = 0) {
                margin-bottom: e(%('calc(99.99% * %s - (%s - %s * %s) + (%s * 2))', @_fraction, @gut, @gut, @_fraction, @gut)) !important;
            }
        }
        & when (@numerator < 0) {
            & when (@gut = 0) {
                margin-top: e(%('calc(99.999999% * (%s * -1))', @_fraction)) !important;
            }
            & when not (@gut = 0) {
                margin-top: e(%('calc(99.99% * (%s * -1) - (%s - %s * (%s * -1)) + (%s * 2))', @_fraction, @gut, @gut, @_fraction, @gut)) !important;
            }
        }
        & when (@numerator = 0) {
            margin-top: 0 !important;
            margin-bottom: @gut !important;
        }
    }
}


// Move
// --------------------------------------------------------------------------

.move(@fraction: 1 of 1, @dir: row, @gut: @gutter) {
    @numerator: extract(@fraction, 1);
    @denominator: extract(@fraction, 3);
    @_fraction: e('@{numerator}/@{denominator}');
    position: relative;

    & when (@dir = row) {
        left: e(%('calc(99.99% * %s - (%s - %s * %s) + %s)', @_fraction, @gut, @gut, @_fraction, @gut));
        & when (@gut = 0) {
            left: e(%('calc(99.999999% * %s)', @_fraction));
        }
    }
    & when (@dir = column) {
        top: e(%('calc(99.99% * %s - (%s - %s * %s) + %s)', @_fraction, @gut, @gut, @_fraction, @gut));
        & when (@gut = 0) {
            top: e(%('calc(99.999999% * %s)', @_fraction));
        }
    }
}


// Utilities
// --------------------------------------------------------------------------

.container {
    .center();
}
